<?php

namespace {{ namespace }};

<<<<<<< HEAD:vendor/laravel/framework/src/Illuminate/Routing/Console/stubs/controller.model.stub
use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
=======
use App\DataTables\PermissionRoleDataTable;
use App\Http\Requests\StorePermissionRequest;
use App\Http\Requests\UpdatePermissionRequest;
use App\Models\Permission;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\File;
use Illuminate\Support\Str;
>>>>>>> e17e76b65ca999f8b3ba0307038961661e4df953:app/Http/Controllers/PermissionController.php

class {{ class }} extends Controller
{
    /**
     * Display a listing of the resource.
     */

    public function getAllModels()
    {
        // Directory where your models are located
        $modelsDirectory = app_path('Models');

        // Get all PHP files in the models directory
        $modelFiles = File::files($modelsDirectory);

        $models = [];

        // Iterate through each file to get model class names
        foreach ($modelFiles as $file) {
            // Get the file name
            $fileName = $file->getFilename();

            // Remove the .php extension
            $modelName = Str::replaceLast('.php', '', $fileName);

            // Fully qualify the model class name
            $modelClass = 'App\\Models\\' . $modelName;

            // Check if the class exists and is an instance of Eloquent Model
            if (class_exists($modelClass) && is_subclass_of($modelClass, 'Illuminate\Database\Eloquent\Model')) {
                $models[] = $modelName;
            }
        }

        // dd($models);
        return $models;
    }

    public function index(PermissionRoleDataTable $dataTable)
    {
        //
        return $dataTable->render('permission.view');
    }

    /**
     * Show the form for creating a new resource.
     */
    public function create(PermissionRoleDataTable $dataTable)
    {
        $models = $this->getAllModels();

        return $dataTable->render('permission.create', compact('models'));
        // return view('permission.create';
    }

    /**
     * Store a newly created resource in storage.
     */
<<<<<<< HEAD:vendor/laravel/framework/src/Illuminate/Routing/Console/stubs/controller.model.stub
    public function store({{ storeRequest }} $request)
=======
    public function store(Request $request)
>>>>>>> e17e76b65ca999f8b3ba0307038961661e4df953:app/Http/Controllers/PermissionController.php
    {
        // dd($request);
        $request->validate([
            'name' => 'required|string|unique:permissions,name',
            'model' => 'required|string',
        ]);

        $nameModel = $request->name . " " . $request->model;

        try {
            // dd();
            // $modelClass = 'App\\Models\\' . $request->model;
            $modelClass = $request->model;
            // Create the permission
            $permission = new Permission();
            $permission->name = $nameModel;
            $permission->guard_name = $modelClass;
            $permission->save();


            // Assign the permission to the specified model
            // $modelClass = $request->model;

            // $modelPermission = "{$modelClass}"; // Example format: App\Models\UserPermission

            // // // dd($modelPermission);
            // // // Assume you have a model that handles permissions for each specific model
            // $modelPermission::create([
            //     'permission_id' => $permission->id,
            // ]);
            // Dynamically create model instance based on the model class string

            DB::insert('INSERT INTO model_has_permissions (permission_id , model_type ,model_id ) VALUES (?, ?, ?)', [
                $permission->id,
                $request->name,
                $request->model, // or specify your guard name if different

            ]);

            // return response()->json("ok");
            // dd("sara");
            // return redirect()->back()->with('alert', 'Permission created successfully.')
            return redirect()->back()->with('success', 'Permission created successfully.');
        } catch (\Exception $e) {
            // dd("yy");
            return response()->json($e->getMessage());
            // return redirect()->back()->with('error', 'Failed to create permission. ' . );
        }
    }

    /**
     * Display the specified resource.
     */
    public function show({{ model }} ${{ modelVariable }})
    {
        //
    }

    /**
     * Show the form for editing the specified resource.
     */
<<<<<<< HEAD:vendor/laravel/framework/src/Illuminate/Routing/Console/stubs/controller.model.stub
    public function edit({{ model }} ${{ modelVariable }})
=======
   public function edit(Permission $permission, PermissionRoleDataTable $dataTable)
{
    $models = $this->getAllModels();
    
    // Split the name into action and model parts
    $nameParts = explode(' ', $permission->name);
    $permissionAction = $nameParts[0] ?? '';
    $permissionModel = $nameParts[1] ?? '';

    return $dataTable->render('permission.edit', compact('permission', 'models', 'permissionAction', 'permissionModel'));
}


    public function update(Request $request, Permission $permission)
>>>>>>> e17e76b65ca999f8b3ba0307038961661e4df953:app/Http/Controllers/PermissionController.php
    {
        $request->validate([
            'name' => 'required|string|unique:permissions,name,' . $permission->id,
            'model' => 'required|string',
        ]);

        $nameModel = $request->name . " " . $request->model;

        try {
            $modelClass = $request->model;
            $permission->name = $nameModel;
            $permission->guard_name = $modelClass;
            $permission->save();

            DB::table('model_has_permissions')
                ->where('permission_id', $permission->id)
                ->update([
                    'model_type' => $modelClass,
                    'model_id' => $request->name,
                ]);

            return redirect()->back()->with('success', 'Permission updated successfully.');
        } catch (\Exception $e) {
            return redirect()->back()->with('error', 'Failed to update permission: ' . $e->getMessage());
        }
    }

<<<<<<< HEAD:vendor/laravel/framework/src/Illuminate/Routing/Console/stubs/controller.model.stub
    /**
     * Update the specified resource in storage.
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }})
    {
        //
    }
=======
>>>>>>> e17e76b65ca999f8b3ba0307038961661e4df953:app/Http/Controllers/PermissionController.php

    // private function getAllModels()
    // {
    //     // Implement this method to return the list of all models
    //     return ['User', 'Role', 'Post']; // Example
    // }
    /**
     * Remove the specified resource from storage.
     */
    public function destroy({{ model }} ${{ modelVariable }})
    {
        //
    }
}
